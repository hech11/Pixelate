#shader vertex

#version 450 core

layout(location = 0) in vec3 aPos;
layout(location = 1) in vec4 aColor;
layout(location = 2) in vec2 aUV;
layout(location = 3) in float aTexIndex;
layout(location = 4) in int aEntityID;


layout(binding = 0) uniform Camera
{
	mat4 u_ViewProjection;
	float TempFloat;
};

struct VertexOutput
{
	vec4 Color;
	vec2 UV;
	float TexIndex;
};


layout(location = 0) out VertexOutput v_Output;
layout(location = 3) out int v_EntityID;


void main() {

	v_Output.Color = aColor;
	v_Output.UV = aUV;
	v_Output.TexIndex = aTexIndex;
	v_EntityID = aEntityID;


	gl_Position = u_ViewProjection * vec4(aPos, 1.0f) * vec4(TempFloat);
}



#shader fragment

#version 450 core

layout(location = 0) out vec4 FragColor;
layout(location = 1) out int EntityColor;



layout(binding = 0) uniform Camera
{
	mat4 u_ViewProjection;
	float TempFloat;
};

struct VertexOutput
{
	vec4 Color;
	vec2 UV;
	float TexIndex;
};

layout(location = 0) in VertexOutput v_Output;
layout(location = 3) in flat int v_EntityID;

layout(binding = 0) uniform sampler2D u_Textures[32];


// This only supports up to 32 texture slots. Most GPU's can support more than this.
// This switch/case is done since modern AMD GPU's do not support sampler indexing.

void main() {

	FragColor = vec4(0.8f*TempFloat, 0.4f*TempFloat, 0.8f*TempFloat, 1.0f*TempFloat);

	EntityColor = v_EntityID;
}